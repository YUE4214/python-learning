# 一、函数
# 1 函数
# 1.1定义：将具有独立功能的代码块组织成一个整体，使其具有特殊功能的代码集，在需要的时候进行调用。
# 1.2作用：提高代码的复用性和编写效率
# 1.3格式：
# def 函数名():
#     函数体
# 1.4调用规则：
# 函数名()
# 函数调用几次就执行几次，每次调用都从头开始执行。调用函数必须确保函数存在，否则报错。
# 1.5示例
# def login():
#     print("请输入姓名：")
# login()

# 2 返回值return
# 2.1定义：函数执行结束后，最后给调用者一个结果
# 2.2格式：
# def a():
#     return "2", "YUE"
#     print("3") #位于return之后的代码不执行
# print(a())
# 2.3函数中遇到return，表示函数结束，不继续执行此函数下面的代码。
# 2.4return返回值的三种情况
# 无返回值，仅return，返回None。
# 一个返回值，把值返回给调用者。
# 返回多个值，会以元组的形式返回为调用者。
# 2.5return和print的区别
# return表示此函数结束，print会一直执行。
# 含有print的函数直接可以调用打印结果，return结果需要使用print打印函数结果。

# 3 参数
# 3.1调用格式
# 形参：定义函数时，小括号里面的变量。
# def 函数名(形参a, 形参b):
#     函数体
# 实参：调用函数时，小括号里面具体值。
# 函数名(实参a1, 实参b1)
# def add(a1, a2):
#     return a1 + a2
# print(add(2, 3)) #调用函数的过程称为传参，传递参数。
# 3.2函数参数-必备参数（位置参数）
# 含义：传递和定义参数的顺序和个数必须一致。
# def funa(a1, a2, a3):
#     print(a1)
#     print(a2)
#     print(a3)
# funa(1, 2, 3) #这里的实参和形参的个数必须保持一致，多和少都不行，否则会报错。
# 实参和形参的顺序位置一一对应，因此也成为位置参数。
# 3.3函数参数-默认参数
# 定义：为参数提供默认值，调用函数的时候可以不传默认参数的值。
# 注意：所有的位置参数必须要出现在默认参数前，包括函数定义和调用。
# def funb(b2, b3, b1=1):
#     print(b2)
#     print(b3)
#     print(b1)
# funb(2, 3) #设置默认值会根据默认值来执行代码。
# funb(2, 3, 500) #传入实参，则根据实参执行代码。
# 3.4函数参数-可变参数
# 定义：传入的值的数量是可以改变的，可以传入多个，也可以不传。
# 格式：
# def 函数名(*args): #*args是可变参数的默认使用惯例，符合代码规范。可以自定义为*变量名，主要靠*发挥作用。
#     函数体
# def func(*args):
#     print(args) #打印结果不需要*，*属于特殊字符。
#     print(type(args))
# func(1, "赤心") #这里的实参以元组的形式进行传参
# 3.5函数参数-关键字参数
# 格式：
# def 函数名(**kwargs):
#     函数体
# def fund(**kwargs):
#     print(kwargs) #打印结果不需要**，**属于特殊字符。
#     print(type(kwargs))
# fund(a = 1, b = "赤心") #这里的实参以字典的形式进行传参，实参需要以 键名 = 值名 的形式。
# 作用：可以扩展函数的功能

# 4 函数嵌套
# 4.1嵌套调用
# 定义：在一个函数里面调用另外一个函数。
# def funa():
#     print("玩家，你好！")
# def funb():
#     funa()
#     print("赤心筑无")
# funb()
# 4.2嵌套定义
# 定义：在一个函数中定义另外一个函数，可以多层嵌套。
# def func():
#     print("玩家，你好！")
#     def fund():
#         print("终局之地")
#         # func() #注意：内层函数调用外函数会导致死循环至代码超过递归的最大深度自动结束。
#     fund()#内函数执行需要在外函数中调用，不调用内函数就不执行内函数。注意缩进，定义和调用处于同一级，否则无法调用。
# func()

# ==================================================
# Python函数知识点总结
# ==================================================

# 1. 函数基础
# --------------------------------------------------
# 定义：将具有独立功能的代码块组织成一个可重复使用的整体
# 作用：
#   - 提高代码复用性，避免重复编写相同逻辑
#   - 增强代码可读性，使程序结构清晰
#   - 便于维护和功能扩展

# 基本格式：
# def 函数名(参数列表):
#     """函数文档字符串（可选，用于说明函数功能）"""
#     函数体  # 实现具体功能的代码
#     [
#     return 返回值]  # 可选的返回语句

# 调用方式：
# 函数名(参数)  # 调用几次就执行几次
# 注意：必须先定义函数，再调用函数，否则会报NameError

# 示例：
# def chop_tree():
#     """砍伐树木"""
#     print("砍伐了一棵树，获得木材x10")

# chop_tree()  # 调用函数

# 2. 返回值（return）
# --------------------------------------------------
# 定义：函数执行结束后，向调用者返回的结果

# 特性：
#   - 函数中遇到return语句会立即终止执行，后续代码不再运行
#   - 无return语句或仅写return时，默认返回None
#   - 可返回单个值或多个值（多个值会被自动包装成元组）

# return与print的区别：
#   - print仅用于输出信息到控制台，不影响函数返回值
#   - return决定函数的返回结果，需通过print(函数调用)才能看到结果

# 示例：
# def get_health():
#     """返回玩家当前生命值"""
#     print("查询生命值中...")
#     return 80  # 返回具体数值

# print(get_health())  # 需要print才能显示返回值

# 3. 函数参数
# --------------------------------------------------

# 3.1 位置参数（必备参数）
# 定义：必须按照顺序传递且数量与形参完全一致的参数
# 特点：实参与形参一一对应，顺序和数量都不能错

# 示例：
# def craft_pickaxe(material, durability):
#     """用指定材料制作镐子"""
#     return f"用{material}制作了耐久度为{durability}的镐子"

# 3.2 默认参数
# 定义：在函数定义时指定默认值的参数，调用时可省略
# 注意：默认参数必须放在位置参数之后
# 格式：def 函数名(位置参数, 默认参数=默认值)

# 示例：
# def spawn_enemy(name, count=1):
#     """生成指定数量的敌人"""
#     return f"生成了{count}只{name}"

# 3.3 可变参数（*args）
# 定义：可以接收任意数量位置参数的参数形式
# 特点：
#   - 参数名前加*，通常用args作为参数名（惯例）
#   - 接收的参数会被包装成元组
#   - 适合处理不确定数量的参数

# 示例：
# def collect_items(*args):
#     """收集多个物品"""
#     return f"收集了{len(args)}种物品：{args}"

# 3.4 关键字参数（**kwargs）
# 定义：可以接收任意数量关键字参数的参数形式
# 特点：
#   - 参数名前加**，通常用kwargs作为参数名（惯例）
#   - 接收的参数会被包装成字典（键为参数名，值为参数值）
#   - 适合处理带名称的可变参数

# 示例：
# def describe_weapon(**kwargs):
#     """描述武器属性"""
#     return f"武器属性：{kwargs}"

# 4. 函数嵌套
# --------------------------------------------------

# 4.1 嵌套调用
# 定义：在一个函数内部调用另一个函数
# 执行流程：先执行被调用函数，完成后继续执行当前函数

# 示例：
# def attack():
#     """攻击敌人"""
#     print("使用武器攻击")
#
# def battle():
#     """战斗过程"""
#     print("开始战斗")
#     attack()  # 嵌套调用attack函数
#     print("战斗结束")

# 4.2 嵌套定义
# 定义：在一个函数内部定义另一个函数（内层函数）
# 特点：
#   - 内层函数仅能在外部函数内部被调用
#   - 内层函数可以访问外部函数的变量

# 示例：
# def explore():
#     """探索过程"""
#
#     def find_treasure():
#         """发现宝藏（内层函数）"""
#         return "发现了宝箱！"
#
#     print("正在探索...")
#     print(find_treasure())  # 调用内层函数

# ==================================================
# 泰拉瑞亚主题练习题
# ==================================================

# ----------------------------
# 练习1：函数定义与调用
# ----------------------------
# 1.1 定义一个名为show_player_status的函数，功能是打印"玩家状态：健康，位置：森林"，然后调用该函数
def show_player_status():
    # 请在此处编写代码
    print("玩家状态：健康，位置：森林")

# 调用函数
show_player_status()

# 1.2 定义一个名为mine_ore的函数，功能是打印"正在挖掘铁矿..."，调用该函数3次
def mine_ore():
    # 请在此处编写代码
    print("正在挖掘铁矿...")

# 调用函数3次
mine_ore()
mine_ore()
mine_ore()

# ----------------------------
# 练习2：返回值（return）
# ----------------------------
# 2.1 定义一个名为get_max_health的函数，返回玩家最大生命值100
def get_max_health():
    # 请在此处编写代码
    return 100

# 测试代码（无需修改）
print(get_max_health())  # 应输出：100

# 2.2 定义一个名为get_potion_effect的函数，返回两个值："治疗药水"和20（表示恢复20点生命值）
def get_potion_effect():
    # 请在此处编写代码
    return "治疗药水", 20

# 测试代码（无需修改）
item, heal = get_potion_effect()
print(item, heal)  # 应输出：治疗药水 20

# ----------------------------
# 练习3：位置参数
# ----------------------------
# 3.1 定义一个名为craft_sword的函数，接收两个参数material（材料）和damage（伤害），
# 返回字符串"用{material}制作了伤害为{damage}的剑"
def craft_sword(material, damage):
    # 请在此处编写代码
    return f"用{material}制作了伤害为{damage}的剑"

# 测试代码（无需修改）
print(craft_sword("铁锭", 15))  # 应输出：用铁锭制作了伤害为15的剑

# 3.2 定义一个名为calculate_distance的函数，接收两个参数x1和x2（表示两个点的x坐标），
# 返回两点之间的距离（绝对值差）
def calculate_distance(x1, x2):
    # 请在此处编写代码
    return abs(x1 - x2)

# 测试代码（无需修改）
print(calculate_distance(10, 30))  # 应输出：20

# ----------------------------
# 练习4：默认参数
# ----------------------------
# 4.1 定义一个名为spawn_boss的函数，接收参数name（Boss名称）和difficulty（难度，默认值为"普通"），
# 返回字符串"召唤了{difficulty}难度的{name}"
def spawn_boss(name, difficulty="普通"):
    # 请在此处编写代码
    return f"召唤了{difficulty}难度的{name}"

# 测试代码（无需修改）
print(spawn_boss("克苏鲁之眼"))  # 应输出：召唤了普通难度的克苏鲁之眼
print(spawn_boss("世界吞噬者", "专家"))  # 应输出：召唤了专家难度的世界吞噬者

# 4.2 定义一个名为plant_seed的函数，接收参数seed_type（种子类型）和grow_time（生长时间，默认值为300秒），
# 返回字符串"种植了{seed_type}，需要{grow_time}秒生长"
def plant_seed(seed_type, grow_time=300):
    # 请在此处编写代码
    return f"种植了{seed_type}，需要{grow_time}秒生长"

# 测试代码（无需修改）
print(plant_seed("向日葵种子"))  # 应输出：种植了向日葵种子，需要300秒生长

# ----------------------------
# 练习5：可变参数（*args）
# ----------------------------
# 5.1 定义一个名为count_ores的函数，接收任意数量的矿石名称作为参数，返回收集的矿石总数量
def count_ores(*args):
    # 请在此处编写代码
    return len(args)

# 测试代码（无需修改）
print(count_ores("铁矿", "铜矿", "金矿"))  # 应输出：3
print(count_ores("钨矿"))  # 应输出：1

# 5.2 定义一个名为sum_damage的函数，接收任意数量的伤害值，返回总伤害（所有值的和）
def sum_damage(*args):
    # 请在此处编写代码
    return sum(args)

# 测试代码（无需修改）
print(sum_damage(10, 20, 15))  # 应输出：45

# ----------------------------
# 练习6：关键字参数（**kwargs）
# ----------------------------
# 6.1 定义一个名为describe_npc的函数，接收任意关键字参数（如name、job、location等），
# 返回NPC的描述字符串"NPC信息：{所有参数的键值对}"
def describe_npc(**kwargs):
    # 请在此处编写代码
    return f"NPC信息：{kwargs}"

# 测试代码（无需修改）
print(describe_npc(name="向导", job="提供指导", location="出生点"))

# 6.2 定义一个名为show_item_info的函数，接收物品的关键字参数（如name、price、rarity等），
# 返回物品信息字符串"物品详情：{所有参数的键值对}"
def show_item_info(**kwargs):
    # 请在此处编写代码
    return f"物品详情：{kwargs}"

# 测试代码（无需修改）
print(show_item_info(name="星辰之怒", price=50, rarity="传说"))

# ----------------------------
# 练习7：函数嵌套
# ----------------------------
# 7.1 定义外层函数enter_battle，内部定义并调用内层函数calculate_damage（返回10），
# 外层函数返回"战斗造成了{伤害值}点伤害"
def enter_battle():
    # 请在此处编写代码
    def calculate_damage():
        return 10
    damage = calculate_damage()
    return f"战斗造成了{damage}点伤害"
# 测试代码（无需修改）
print(enter_battle())  # 应输出：战斗造成了10点伤害

# 7.2 定义函数explore_area，实现以下功能：
#   - 打印"开始探索丛林"
#   - 内部定义函数find_treasure，功能是返回"发现黄金宝箱"
#   - 调用find_treasure并打印结果
def explore_area():
    # 请在此处编写代码
    print("开始探索丛林")
    def find_treasure():
        return "发现黄金宝箱"
    print(find_treasure())

# 测试代码（无需修改）
explore_area()

# ----------------------------
# 练习8：综合练习
# ----------------------------
# 定义一个名为adventure的函数，实现以下功能：
#   - 接收参数：玩家名称（位置参数）、探索区域（默认值为"森林"）
#   - 接收可变参数：携带的物品列表
#   - 接收关键字参数：玩家等级（level）、生命值（hp）
#   - 函数内定义一个嵌套函数check_survival，判断hp是否大于0，返回"存活"或"已死亡"
#   - 最终返回一个字符串，格式如下：
#     "玩家{player_name}在{area}探索，携带了{len(items)}件物品，等级{level}，状态：{生存状态}"
def adventure(player_name, area="森林", *items, **kwargs):
    # 请在此处编写代码
    def check_survival(hp):
        if hp > 0:
            return "存活"
        else:
            return "已死亡"
    player_live = check_survival(kwargs.get('hp'))
    return f"玩家{player_name}在{area}探索，携带了{len(items)}件物品，等级{kwargs.get('level',1)}，状态：{player_live}"
# 测试代码（无需修改）
print(adventure("史蒂夫", "地牢", "剑", "盾牌", level=5, hp=80))
# 应输出：玩家史蒂夫在地牢探索，携带了2件物品，等级5，状态：存活

