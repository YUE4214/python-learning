###2025年7月28日学习笔记：
# #1.列表

# #1.1列表
# #基本格式
# #列表名 = [元素1， 元素2， 元素3]，使用","间隔开各个元素，各个元素的类型可以不同
# #列表可以进行切片操作
# #列表是可迭代对象，可以使用for循环遍历取值
# a = ["赤心", 52, 63, "good"]
# print(a)
# print(a[1])
# print(type(a))

# #2.列表操作

# #2.1列表添加
# #append()，extend()，insert()
# a = ["赤心", 52, 63, "good"]
# a.append("筑无") #append():整体添加
# a.extend("筑无") #extend():分散添加，将另外一个类型中的元素逐一添加，这里的元素必须是可迭代对象
# a.insert(0,"YUE") #insert():在指定位置插入元素，必须指定位置
# print(a)

# #2.2列表修改
# a = ["赤心", 52, 63, "good"]
# a[1] = 1949 #直接通过下标进行赋值替换
# print(a)

# #2.3查找元素
# #in
# #not in
# #index
# #count
# #用法和字符串中基本相同
# a = ["赤心", 52, 63, "good"]
# print(52 in a)
# print(56 not in a)
# #选中代码后，tab键可以统一缩进

# #2.4删除元素
# #del
# #pop：删除指定下标的数据。若没有指令下标，则默认删除最后一个元素。若下标超限，则报错。
# #remove：根据元素的值进行删除。若删除的值不存在，则报错。
# a = ["赤心", 52, 63, "good", "a", "c", "c", "d"]
# #del a #删除整个列表
# del a[1] #根据下标删除对应的元素
# print(a)
# a.pop(1) #删除最后一个元素
# print(a)
# a.remove("c") #默认删除第一个出现的值
# print(a)

# #2.5排序
# #sort：将列表按照特定顺序进行排列，默认从小到大
# #reverse：将列表倒序排列
# a = [100, 52, 63, 20, 1, 56, 5, 5]
# a.sort() #默认从小到大顺序排序，不能用于字符串和整型进行比较
# print(a)
# a.reverse() #将列表倒序排列
# print(a)

# #2.6列表推导式
# #格式一：[表达式 for 变量 in 列表]
# #注意in后面不一定非得是列表，也可以用range()，可迭代对象
# #格式二：[表达式 for 变量 in 列表 if 条件]
a = ["赤心", 52, 63, "good", "a", "c", "c", "d"]
# [print(i) for i in a] #一种简写方式
# print(a)
# [a.append(i) for i in range(10)]
# print(a)
# [a.append(i) for i in range(10) if i % 2 == 0]
# print(a)

#2.6列表嵌套
#一个列表中包含一个列表，可以多层嵌套
# a = ["赤心", 52, 63, "good", ["a", "c", "c", "d"]]
# print(a[4])
# print(a[4][2]) #取出内列表中的元素
###豆包总结和习题
# 一、列表知识点总结（结合我的世界场景）
# 1. 列表基础
# 基本格式：列表名 = [元素1, 元素2, 元素3,...]，元素类型可不同，可进行切片、可迭代（用for遍历）
# 类比：像“背包”，能装不同类型物品（如工具、材料、生物掉落物等），可查看、遍历里面的物品

# 2. 列表操作
## 2.1 添加操作
# append()：整体添加元素，类似给背包“直接放入”一个完整物品（如整组矿石）
# extend()：分散添加，需传入可迭代对象，像把一组物品“拆分逐个放入”背包（如把附魔书里的属性拆出来添加）
# insert()：指定位置插入，比如在背包特定格子插入重要道具（如把钻石剑放到常用位置）

## 2.2 修改操作
# 通过下标直接赋值替换，如同“替换”背包里对应位置的物品（把木剑换成钻石剑）

## 2.3 查找元素
# in：判断元素是否在列表（背包）中，如检查有没有末影珍珠
# not in：判断元素是否不在列表，如检查有没有被偷的钻石
# index：找元素下标位置，像找“镐子”在背包第几个格子
# count：统计元素出现次数，如统计背包里“圆石”数量

## 2.4 删除元素
# del：可删整个列表（清空背包）或按下标删元素（删指定格子物品）
# pop：删指定下标（默认最后一个），类似“取出”背包最后/指定位置物品
# remove：按值删（删第一个匹配的），像删掉背包里的“腐肉”

## 2.5 排序
# sort：列表元素排序（需同类型可比，如按物品数量、耐久排序），默认升序
# reverse：列表倒序排列，像把背包物品顺序倒过来

## 2.6 列表推导式
# 格式1：[表达式 for 变量 in 可迭代对象]，快速生成/操作列表，如批量整理背包物品
# 格式2：[表达式 for 变量 in 可迭代对象 if 条件]，带条件筛选，如只整理耐久>50%的工具

## 2.7 列表嵌套
# 列表里包含列表，像“背包里的箱子”，多层嵌套，可访问内层元素（如取箱子里的物品）

# 二、对应练习题（结合我的世界）
# 说明：以下题目基于我的世界常见物品、场景设计，覆盖列表各知识点，尝试用代码实现解决

# # 1. 基础操作题
# #题目1：创建一个列表表示“背包”，包含物品："木剑", 64, "圆石", "铁矿" ，打印列表、取第二个元素、打印类型
# print("===== 基础操作题 - 题目1 =====")
# # 请补充代码实现
# backpack = ["木剑", 64, "圆石", "铁矿"]
# print(backpack)
# print(backpack[1])
# print(type(backpack))
# # 题目2：给“背包”列表用append添加"钻石镐"、extend添加"附魔书"（拆分添加）、insert在索引1位置加"火把"，打印结果
# print("===== 基础操作题 - 题目2 =====")
# # 请补充代码实现
# backpack.append("钻石镐")
# print(backpack)
# backpack.extend("附魔书")
# print(backpack)
# backpack.insert(1,"火把")
# print(backpack)
# # 2. 修改与查找题
# # 题目3：把“背包”列表索引2位置的元素换成"金苹果"，然后判断"钻石镐"是否在列表、"木剑"是否不在列表，再找"圆石"下标、统计"64"出现次数
# print("===== 修改与查找题 - 题目3 =====")
# # 请补充代码实现
# backpack = ["木剑", 64, "圆石", "铁矿"]
# backpack[2] = "金苹果"
# print(backpack)
# print("木剑" in backpack)
# print(backpack.index("圆石"))
# print(backpack.count("64"))
# # 3. 删除操作题
# # 题目4：用del删除“背包”索引3的元素，用pop删除索引1的元素（无参数则删最后），用remove删除"圆石"，打印每步结果
# print("===== 删除操作题 - 题目4 =====")
# # 请补充代码实现
# del backpack[3]
# print(backpack)
# backpack.pop(1)
# print(backpack)
# # backpack.remove("圆石")
# # print(backpack)
# # 4. 排序与推导式题
# # 题目5：创建列表表示“工具耐久”：[30, 80, 50, 90, 20]，用sort排序、reverse倒序，分别打印结果
# print("===== 排序与推导式题 - 题目5 =====")
# # 请补充代码实现
# tools_durability = [30, 80, 50, 90, 20]
# tools_durability.sort()
# print(tools_durability)
# tools_durability.reverse()
# print(tools_durability)
#
# # 题目6：用列表推导式，生成1 - 20中能被3整除的数的列表（模拟整理背包里数量是3倍数的物品组）；再生成背包列表里字符串类型元素的新列表（模拟筛选文字标识物品）
# print("===== 排序与推导式题 - 题目6 =====")
# # 请补充代码实现
# list1 = []
# [list1.append(i) for i in range(1,21) if i % 3 == 0]
# print(list1)
# new_backpack = []
# [new_backpack.append(i) for i in backpack if type(i) == str]
# print(new_backpack)
#
# # 5. 嵌套操作题
# # 题目7：创建嵌套列表表示“背包里的箱子”：["铁锭", "红石", ["末影之眼", "末影珍珠", "烈焰粉"]]，取出箱子里的"末影珍珠"并打印
# print("===== 嵌套操作题 - 题目7 =====")
# # 请补充代码实现
# box_in_backpack = ["铁锭", "红石", ["末影之眼", "末影珍珠", "烈焰粉"]]
# print(box_in_backpack[2][1])
###优化后的答案：
# 1. 基础操作题
# 题目1：创建一个列表表示“背包”，包含物品："木剑", 64, "圆石", "铁矿" ，打印列表、取第二个元素、打印类型
print("===== 基础操作题 - 题目1 =====")
backpack = ["木剑", 64, "圆石", "铁矿"]
print("背包列表：", backpack)
print("第二个元素：", backpack[1])
print("列表类型：", type(backpack))

# 题目2：给“背包”列表用append添加"钻石镐"、extend添加"附魔书"（拆分添加）、insert在索引1位置加"火把"，打印结果
print("===== 基础操作题 - 题目2 =====")
backpack = ["木剑", 64, "圆石", "铁矿"]
backpack.append("钻石镐")
backpack.append("附魔书")  # 用append保持物品整体性，符合场景
backpack.insert(1, "火把")
print("操作后背包：", backpack)

# 2. 修改与查找题
# 题目3：把“背包”列表索引2位置的元素换成"金苹果"，然后判断"钻石镐"是否在列表、"木剑"是否不在列表，再找"圆石"下标、统计"64"出现次数
print("===== 修改与查找题 - 题目3 =====")
backpack = ["木剑", 64, "圆石", "铁矿"]
backpack[2] = "金苹果"
print("修改后背包：", backpack)
print("钻石镐是否在背包：", "钻石镐" in backpack)
print("木剑下标：", backpack.index("木剑"))
print("整数64出现次数：", backpack.count(64))
p
# 3. 删除操作题
# 题目4：用del删除“背包”索引3的元素，用pop删除索引1的元素（无参数则删最后），用remove删除"圆石"，打印每步结果
print("===== 删除操作题 - 题目4 =====")
backpack = ["木剑", 64, "圆石", "铁矿"]
del backpack[3]
print("del 删除索引3元素后：", backpack)
backpack.pop(1)
print("pop 删除索引1元素后：", backpack)
backpack.remove("圆石")
print("remove 删除'圆石'后：", backpack)

# 4. 排序与推导式题（题目5、6 逻辑清晰，可保留，若想更贴合场景，可给变量名加注释说明）
# 题目5：创建列表表示“工具耐久”：[30, 80, 50, 90, 20]，用sort排序、reverse倒序，分别打印结果
print("===== 排序与推导式题 - 题目5 =====")
tools_durability = [30, 80, 50, 90, 20]
tools_durability.sort()
print("sort升序排序后：", tools_durability)
tools_durability.reverse()
print("reverse倒序后：", tools_durability)

# 题目6：用列表推导式，生成1 - 20中能被3整除的数的列表（模拟整理背包里数量是3倍数的物品组）；再生成背包列表里字符串类型元素的新列表（模拟筛选文字标识物品）
print("===== 排序与推导式题 - 题目6 =====")
list1 = [i for i in range(1, 21) if i % 3 == 0]  # 推导式简写
print("1-20能被3整除的数：", list1)
new_backpack = [i for i in backpack if type(i) == str]  # 推导式简写
print("背包里字符串类型物品：", new_backpack)

# 5. 嵌套操作题
# 题目7：创建嵌套列表表示“背包里的箱子”：["铁锭", "红石", ["末影之眼", "末影珍珠", "烈焰粉"]]，取出箱子里的"末影珍珠"并打印
print("===== 嵌套操作题 - 题目7 =====")
box_in_backpack = ["铁锭", "红石", ["末影之眼", "末影珍珠", "烈焰粉"]]
print("箱子里的末影珍珠：", box_in_backpack[2][1])