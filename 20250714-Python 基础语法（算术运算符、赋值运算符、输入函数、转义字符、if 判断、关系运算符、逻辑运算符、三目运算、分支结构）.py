###2025年7月14日学习笔记：
#1.算术运算符
#1.1算术运算符
"""
+加
-减
*乘
/除，商是浮点型
//取整除，向下取整，不计四舍五入，直接舍弃小数。9 // 2 = 4。
%取余数，只取余数。5 % 2 = 1
**幂函数。5 ** 2 = 25
算术运算符，输入有浮点型，则输出为浮点型。
优先级：** > * / // % > + -
"""
#1.2赋值运算符：针对变量赋值，纯数字无法使用。
"""
=赋值。
+=累加，a += n等效a = a + n。+=是一个整体，中间无空格
-=累减，a -= n等效a = a - n。-=是一个整体，中间无空格
"""
#2.输入函数
#2.1输入函数
"""
input(prompt)：prompt是提示，会在控制台中显示。
input函数输出的字符串类型
"""
# name = input("请输入姓名：")
# print(name)
#3.转义函数
#3.1制表符
"""
\t 通常情况表示空4个字符，也称为缩进
"""
#3.2换行符
"""
\n 通常情况表示换行
"""
# print("yue\nzhong\twen")
#3.3回车符
"""
\r 通常情况表示将当前位置移动到本行开头
"""
# print("yue\rzhongwen")
#3.4反斜杠符
"""
\\ 通常情况表示将当前位置移动到本行开头
"""
# print("yue\\zhongwen")
# print(r"yue\\zhongwen") #r取消转义
#4.if判断
#4.1if判断
"""
if 判断条件:
    执行操作
":"注意不能省略，否则会报错
"""
# a = input("请输入成绩：")
# if a > "59": #input函数输出的字符串类型，想要和59比较，需要将59打上冒号编程字符串类型。
#     print("合格")
# else:
#     print("不合格")
# print(type(a))
#注意问题：input函数输出的字符串类型，想要和59比较，需要将59打上冒号编程字符串类型。
#5.关系（比较）运算符
#5.1关系（比较）运算符
"""
== 比较两个变量的值是否相等，相等返回为True，不相等返回为False
！= 比较两个变量的值是否不相等，不相等返回为True，相等返回为False
>= 大于等于
<= 小于等于
> 大于
< 小于
"""
#6.逻辑运算符
#6.1逻辑运算符
"""
and（与）
or（或）
not（非）,取反
"""
# a = 10
# b = 20
# c = 20
# if (not a == c) and (not b == c):
#     print("均相等")
# else:
#     print("不符合")
#7.三目运算（三元表达式）
#7.1 三目运算（三元表达式）
"""
基本格式：为真结果 if 判断条件 else 为假结果
"""
# a = 10
# b = 20
# c = 20
# print("均相等") if (not a == c) and (not b == c) else print("不符合")
#8.if-else if-elif if-elif-else if嵌套
#8.1 if-else if-elif if-elif-else
"""

"""
# a = 10
# b = 15
# c = 20
# if a == c:
#     print("相等")
# elif b == c:
#     print("相等")
# else:
#     print("不符合")
#8.2 if嵌套
"""
注意缩进的位置，决定嵌套位置
"""
# a = 10
# b = 15
# c = 20
# if a == c:
#     if b == c:
#         print("a，b，c相等")
#     else:
#         print("a，c相等，b，c不相等")
# elif a != c:
#     if b == c:
#         print("a，c不相等，b，c相等")
#     else:
#         print("a，c不相等，b，c不相等")
###豆包总结
"""
#20250714-Python 基础语法（算术运算符、赋值运算符、输入函数、转义字符、if判断、关系运算符、逻辑运算符、三目运算、分支结构）.py

## 一、知识点总结

### 1. 算术运算符
- 包含：`+`（加）、`-`（减）、`*`（乘）、`/`（除，结果为浮点型）、`//`（取整除，向下取整）、`%`（取余数）、`**`（幂运算）。
- 特性：输入含浮点型时，输出为浮点型。
- 优先级：`**` > `*`/`/`/`//`/`%` > `+`/`-`。
### 2. 赋值运算符
- 作用：针对变量赋值，纯数字不可用。
- 包含：
  - `=`：基础赋值（如`a = 5`）。
  - `+=`：累加（`a += n` 等效 `a = a + n`）。
  - `-=`：累减（`a -= n` 等效 `a = a - n`）。
- 注意：运算符中间无空格，是一个整体。
### 3. 输入函数（input）
- 格式：`input(prompt)`，`prompt`为控制台显示的提示信息。
- 特性：返回结果为字符串类型（`str`）。
### 4. 转义字符
- `\t`：制表符，通常空4个字符（缩进）。
- `\n`：换行符，强制换行。
- `\r`：回车符，将当前位置移到本行开头（覆盖前面内容）。
- `\\`：表示反斜杠本身。
- 取消转义：字符串前加`r`（如`r"yue\\zhongwen"`）。
### 5. if判断
- 基本结构：
  ```python
  if 判断条件:
      执行操作  # 注意冒号`:`不可省略，缩进代表代码块
  ```
- 注意：`input`返回字符串，与数字比较时需处理类型（如转为数值类型，而非将数字转为字符串）。
### 6. 关系（比较）运算符
- 包含：
  - `==`：判断值是否相等（返回`True`/`False`）。
  - `!=`：判断值是否不相等（返回`True`/`False`）。
  - `>=`：大于等于；`<=`：小于等于；`>`：大于；`<`：小于。
### 7. 逻辑运算符
- 包含：
  - `and`（与）：全为`True`则结果为`True`。
  - `or`（或）：任一为`True`则结果为`True`。
  - `not`（非）：取反（`True`变`False`，反之亦然）。
### 8. 三目运算（三元表达式）
- 格式：`为真结果 if 判断条件 else 为假结果`。
- 作用：简化简单的`if-else`判断。
### 9. 分支结构
- `if-elif-else`：多条件判断，依次检查条件，满足则执行对应代码块。
- `if嵌套`：在`if`代码块中嵌套`if`判断，需注意缩进（缩进决定层级）。
## 二、知识缺陷
1. **input函数类型处理**：用户提到“将59打上引号转为字符串”与input结果比较，但字符串比较逻辑（如"100" < "59"因首字符'1' < '5'）会导致错误，正确做法应将input结果转为数值类型（`int(input())`或`float(input())`）。
2. **算术运算符细节**：未提及`//`对负数的处理（如`-9 // 2 = -5`，仍向下取整），以及`%`在负数场景的结果（如`-5 % 2 = 1`）。
3. **赋值运算符完整性**：仅提到`+=`、`-=`，未涵盖`*=`、`/=`、`//=`、`%=`等其他复合赋值运算符。
4. **逻辑运算符特性**：未说明短路逻辑（如`and`前条件为`False`时，后续条件不执行；`or`前条件为`True`时，后续条件不执行）。
5. **转义字符细节**：`\r`的实际效果（如`print("abc\r12")`输出`12c`，覆盖前面字符）解释不足，且未提及其他转义字符（如`\b`退格、`\''`单引号等）。
6. **关系运算符混淆点**：未强调`==`（比较值）与`is`（比较内存地址）的区别，可能导致理解混淆。
7. **三目运算局限性**：未说明复杂逻辑下三目运算的可读性问题，不建议过度嵌套使用。
8. **分支结构规范**：if嵌套的缩进层级过多时的可读性问题，未提及代码优化建议（如提前return减少嵌套）。
"""
###夜间题目练习
"""
练习题 1：计算角色剩余生命值（输入函数 + 算术运算符）
知识点：input()函数、int()类型转换、减法运算符
场景：泰拉瑞亚中，玩家当前生命值为current_hp，被怪物攻击后受到damage点伤害，计算剩余生命值（生命值最低为 0，不能为负数）。
要求：
用input()分别获取玩家当前生命值（整数）和受到的伤害（整数）；
计算剩余生命值（若结果为负数则按 0 处理）；
输出 “剩余生命值：X”（X 为计算结果）。
示例：
输入：当前生命值 = 100，伤害 = 30 → 输出：剩余生命值：70
输入：当前生命值 = 20，伤害 = 50 → 输出：剩余生命值：0
"""
# current_hp = int(input("当前生命值 = "))
# damage = int(input("受到伤害 = "))
# final_hp = current_hp - damage
# print(f"剩余生命值 = {final_hp}")
"""
练习题 2：累加矿石数量（赋值运算符）
知识点：+=赋值运算符、input()函数
场景：玩家在泰拉瑞亚地下挖矿，初始拥有copper_ore（铜矿）10 个。每次挖矿后，通过输入获取本次挖到的铜矿数量，用+=累加到总数量中。
要求：
初始值copper_ore = 10；
用input()获取 3 次挖矿的数量（每次输入一个整数）；
每次累加后打印 “当前铜矿总数：X”；
最终输出 “总铜矿数量：X”。
"""
# copper_ore = 10
# gain_copper_ore = int(input("挖到铜矿 + "))
# copper_ore += gain_copper_ore
# print(f"当前铜矿总数：{copper_ore}")
# gain_copper_ore = int(input("挖到铜矿 + "))
# copper_ore += gain_copper_ore
# print(f"当前铜矿总数：{copper_ore}")
# gain_copper_ore = int(input("挖到铜矿 + "))
# copper_ore += gain_copper_ore
# print(f"当前铜矿总数：{copper_ore}")
# print(f"总铜矿数量：{copper_ore}")
"""
练习题 3：格式化装备信息（转义字符）
知识点：\t（制表符）、\n（换行符）、r取消转义
场景：玩家需要整理背包中的武器信息，包含 “名称、伤害、稀有度” 三个属性。
要求：
用\t分隔每个属性，用\n换行显示 3 件武器；
再用r取消转义，输出字符串"C:\Terraria\Weapons\Excalibur"（确保反斜杠不被转义）。
铜短剑	5	白色
铁宽剑	8	蓝色
永夜之刃	110	红色
C:\Terraria\Weapons\Excalibur
"""
# print("名称\t伤害\t稀有度\n")
# print("铜短剑\t5\t白色\n")
# print("永夜之刃\t110\t红色\n")
# print(r"C:\Terraria\Weapons\Excalibur")
"""
练习题 4：判断是否能挖掘矿石（if 判断 + 关系运算符）
知识点：if-else、>（大于）、input()类型转换
场景：泰拉瑞亚中，不同矿石需要对应的镐子等级才能挖掘：铜矿需要镐子等级≥1，铁矿≥2，金矿≥3。
要求：
用input()获取玩家当前镐子等级（整数）和目标矿石（字符串，如 “铜矿”“铁矿”“金矿”）；
判断是否能挖掘该矿石，能则输出 “可以挖掘 [矿石]”，否则输出 “镐子等级不足，无法挖掘 [矿石]”。
"""
# pickaxe_level = int(input("当前镐子等级 = "))
# target_ore = input("要挖的矿石铜矿/铁矿/金矿 = ")
# ore_level = 0
# if target_ore == "铜矿":
#     if pickaxe_level >= 1:
#         print(f"可以挖掘{target_ore}")
#     else:
#         print(f"镐子等级不足，无法挖掘{target_ore}")
# elif target_ore == "铁矿":
#     if pickaxe_level >= 2:
#         print(f"可以挖掘{target_ore}")
#     else:
#         print(f"镐子等级不足，无法挖掘{target_ore}")
# elif target_ore == "金矿":
#     if pickaxe_level >= 3:
#         print(f"可以挖掘{target_ore}")
#     else:
#         print(f"镐子等级不足，无法挖掘{target_ore}")
# else:
#     print(f"不存在{target_ore}")
"""
练习题 5：判断是否能释放技能（逻辑运算符）
知识点：and、or、not、关系运算符
场景：玩家释放 “魔法飞弹” 技能需要满足：法力值mana ≥ 20 且 拥有 “魔法书”；释放 “治疗药水” 需要满足：生命值hp < 50 或 拥有 “急救包”。
要求：
定义变量mana = 25，has_book = True，hp = 30，has_kit = False；
用and判断是否能释放 “魔法飞弹”，输出结果；
用or判断是否能释放 “治疗药水”，输出结果；
用not判断 “是否没有急救包”，输出结果。
"""
# mana = 25
# has_book = True
# hp = 30
# has_kit = False
# if (mana >= 20) and has_book:
#     print("释放魔法飞弹")
# elif mana < 20:
#     print("魔力不足")
# elif not has_book:
#     print("没有对应魔法书")
# if (hp < 50) or has_kit:
#     print("释放治疗药水")
# elif hp >= 50:
#     print("不需要使用")
# if not has_kit:
#     print("没有急救包")
"""
练习题 6：药水效果判断（三目运算）
知识点：三元表达式
场景：玩家使用 “再生药水” 后，生命值会恢复 50 点，但不能超过最大生命值max_hp = 200。
要求：
用input()获取当前生命值current_hp（整数）；
用三目运算计算使用药水后的生命值：若current_hp + 50 > 200则取 200，否则取current_hp + 50；
输出 “使用药水后生命值：X”。
"""
# current_hp = int(input("当前生命值 = "))
# final_hp = 200  if (current_hp + 50) > 200 else (current_hp + 50)
# print(f"使用药水后生命值 = {final_hp}")
"""
练习题 7：根据怪物类型掉落物品（if-elif-else）
知识点：多分支结构、==关系运算符
场景：泰拉瑞亚中，击败不同怪物会掉落不同物品：
击败 “史莱姆” 掉落 “凝胶”；
击败 “僵尸” 掉落 “腐肉”；
击败 “骷髅” 掉落 “骨头”；
击败其他怪物掉落 “金币 x1”。
要求：
用input()获取击败的怪物名称（字符串）；
用if-elif-else判断并输出对应的掉落物品。
"""
# monster_name = input("击败怪物名称 = ")
# if monster_name == "史莱姆":
#     print(f"击败{monster_name}，掉落凝胶")
# elif monster_name == "僵尸":
#     print(f"击败{monster_name}，掉落腐肉")
# elif monster_name == "骷髅":
#     print(f"击败{monster_name}，掉落骨头")
# else:
#     print(f"击败{monster_name}，金币×1")
"""
练习题 8：判断能否进入地牢（if 嵌套）
知识点：if 嵌套、逻辑运算符
场景：进入泰拉瑞亚地牢需要满足：
首先必须击败 “骷髅王”（has_killed_skull = True）；
其次，要么拥有 “金钥匙”（has_gold_key = True），要么背包中至少有 10 个金币（gold ≥ 10）。
要求：
用input()获取has_killed_skull（输入 “是” 或 “否”，转换为布尔值）、has_gold_key（同上）、gold（整数）；
用 if 嵌套判断是否能进入地牢，输出 “可以进入地牢” 或对应的原因（如 “未击败骷髅王”“缺少钥匙且金币不足”）。
"""
# has_killed_skull = input("是否击败骷髅王 是/否 = ") == "是"
# has_gold_key = input("是否拥有黄金钥匙 是/否 = ") == "是"
# gold = int(input("当前金币数量 = "))
# if has_killed_skull:
#     if has_gold_key or (gold >= 10):
#         print("可以进入地牢")
#     elif  not has_gold_key and (gold < 10):
#         print("缺少钥匙且金币不足")
# else:
#     print("未击败骷髅王")

